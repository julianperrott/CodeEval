/* https://www.codeeval.com/open_challenges/50/
    STRING SUBSTITUTION

    CHALLENGE DESCRIPTION:

    Credits: This challenge was contributed by Sam McCoy
    Given a string S, and a list of strings of positive length, F1,R1,F2,R2,...,FN,RN, proceed to find in order the occurrences (left-to-right) of Fi in S and replace them with Ri. All strings are over alphabet { 0, 1 }. Searching should consider only contiguous pieces of S that have not been subject to replacements on prior iterations. An iteration of the algorithm should not write over any previous replacement by the algorithm.

    INPUT SAMPLE:

    Your program should accept as its first argument a path to a filename. Each line in this file is one test case. Each test case will contain a string, then a semicolon and then a list of comma separated strings. E.g.

    10011011001;0110,1001,1001,0,10,11
    OUTPUT SAMPLE:

    For each line of input, print out the string after substitutions have been made.eg.

    11100110
    For the curious, here are the transitions for the above example: 10011011001 => 10100111001 [replacing 0110 with 1001] => 10100110 [replacing 1001 with 0] => 11100110 [replacing 10 with 11]. So the answer is 11100110
*/

function replaceSub(source, index, len, replacement) {
    return source.substring(0, index) + replacement + source.substring(index + len);
}

function stringSubstitute(textArg, findArg) {
    var index = textArg.mask.indexOf(findArg.find);
    if (index == -1) { return textArg; }

    var newresult = replaceSub(textArg.result, index, findArg.find.length, findArg.replace);
    var maskrep = "#############".substr(0, findArg.replace.length);
    var newmask = replaceSub(textArg.mask, index, findArg.find.length, maskrep);

    return stringSubstitute({ result: newresult, mask: newmask }, findArg);
}

function stringSubstitution(line) {
    var args = line.split(";");
    var findArgs = args[1].split(",");

    return Array.apply(null, { length: findArgs.length / 2 })
        .map(function (u, i) { return { find: findArgs[i * 2], replace: findArgs[i * 2 + 1] }; })
        .reduce(function (textArgAcc, findReplaceArgs) {
            return stringSubstitute(textArgAcc, findReplaceArgs);
        }, { result: args[0], mask: args[0] })
        .result;
}

describe("replaceSub", function () {
    it("1", function () { expect(replaceSub("abcdefg", 2, 4, "1234")).toEqual("ab1234g"); });
});

describe("stringSubstitute", function () {
    it("1", function () { expect(stringSubstitute({ result: "1101111000", mask: "xxx1111xxx" }, { find: "11", replace: "34" })).toEqual({ result: "1103434000", mask: "xxx####xxx" }); });
    it("1", function () { expect(stringSubstitute({ result: "1101111010", mask: "1101110010" }, { find: "01", replace: "100" })).toEqual({ result: "111001111000", mask: "11###110###0" }); });
});

describe("stringSubstitution", function () {
    it("a", function () { expect(stringSubstitution("10011011001;0110,1001,1001,0,10,11")).toEqual("11100110"); });
    it("1", function () { expect(stringSubstitution("1000011110011100101001011000101111111101100100000001011101111001100101011000;10,011011,10100,101,1001,01100")).toEqual("0110110001110110110110110110011011011011001101110110110001101111111110110111011011001101100000001101111011011111011011010110110011011011011101101100"); });
    it("2", function () { expect(stringSubstitution("000110011101000001100010101110000110110100011010100011010011010100101;100110,10001,000100,111,10,11110")).toEqual("00011111001111110111100000111110001111011110111111000011111011111011110001111101111011110001111101000111110111100111101"); });
    it("3", function () { expect(stringSubstitution("11111000101100001000101101000110010101100101100000011101110111111000100011;001011,11,010100,11000,10110,0011,111,0011")).toEqual("0011110110000101101000110010101111000000001100011000110011000100011"); });
    it("4", function () { expect(stringSubstitution("1110000010010010010111010011011001110101111011000010000110001000000;101,001,1100,110,101010,101111,11111,0000,101,111")).toEqual("11100001001001000011001001001100110010111001100001000011001000000"); });
    it("5", function () { expect(stringSubstitution("01011001011111000001110011000001111011100111001010011101011101101101000001;101,00,01,100,11001,111")).toEqual("0001000011110000100110100100001001100110100110000010010010010000000000100"); });
    it("6", function () { expect(stringSubstitution("10101111101010011000110000110101110111101011100000111001100110000101111010;111111,110,101001,10,010,000")).toEqual("1000111110101000110000110001110111100011100000111001100110000001111000"); });
    it("7", function () { expect(stringSubstitution("0000000110011001001000101101111010010101001101100110101010010101111;0110,000,001,010100,101000,0001,0100,100")).toEqual("00000000000001010100001010000011110101010001010000110000101010101000101111"); });
    it("8", function () { expect(stringSubstitution("111010001100001000011100000000111101000000001011000101111101010000010000110000;11,01,010110,011,1101,00,01101,000,10011,100")).toEqual("011010000100001000001100000000010101000000001001000100101101010000010000010000"); });
    it("9", function () { expect(stringSubstitution("0100110110011011111001001110010011101010100000011010000110001010010100011011;11101,01100,011010,01,000,01,11101,011011,101010,00")).toEqual("01001101100110111110010011100100011000101010001011101101001010111011"); });
    it("10", function () { expect(stringSubstitution("110011101001000111110010110001100010111000010110011101110011101011000101001110;10,10111,110000,10,111111,011,11101,101010,00,00001")).toEqual("110111011101111011101011100001111110111010111110111000011101110000110111111011100001010111110111011101111110111011101111011111011100001101111011101110111"); });
    it("11", function () { expect(stringSubstitution("011110110111011101110101010010111011100010011110000111110100110101001110011101;000110,0011,010,10,0001,1010,111,001,0001,110")).toEqual("000110110001000100011011010001000100100001101010001110011101000010000101"); });
    it("12", function () { expect(stringSubstitution("1010010010001100011110111111010110000000100001000101010011100110001011;000011,010,110,101,111111,11101,01000,11110")).toEqual("1010010111101010011101111110110101000001111011110101010011010101001011"); });
    it("13", function () { expect(stringSubstitution("00100100000000011010110101101010010000101111001000110000011011010000101000011;101,10110,100110,000,0000,111")).toEqual("0010011111110110110011011001101100100111110110111001000111110110110101101111011011111"); });
    it("14", function () { expect(stringSubstitution("01010011101111101100100001110010000111100100000011010010111101011111101110001;1100,10,00000,100010,0011,001,1011,011")).toEqual("01010010111110101000011010000110110001001101000111100111111011001"); });
    it("15", function () { expect(stringSubstitution("001001000110000111101100010101011000110000000010101011110000001110110010011;1011,0101,11,01,11,10010")).toEqual("001001000010000011010100010100101000010000000010100101010000000101010010001"); });
    it("16", function () { expect(stringSubstitution("11010110100000000101011111100011000101111101001100110110001101010111101011111;01000,0000,110,011010,10010,00")).toEqual("0110101011000000000101011110110100001101000101110110101000110100011010011010000110101010110110101011111"); });
    it("17", function () { expect(stringSubstitution("000001110000000011011010000011111010111000100011111111011100100100;00011,011011,01,000101,011,1110,11,11000")).toEqual("000110111000000110110001011000101000110111100010001010001011100000000101011011110001100011000000101110000000101000010100"); });
    it("18", function () { expect(stringSubstitution("01000111100111110100011011000011111011000000011011001011010100000001110001;0010,0001,10011,00,10111,100010,0000,10001")).toEqual("01000111001110100011011100011111101110001000110110001110101100010001110001"); });
    it("19", function () { expect(stringSubstitution("00110100100101001001011110111100111000111111111001110000110101001111100;0101,01,101,111,11,011101")).toEqual("0011110010010010010111011110111011000111011000011101011101011101011101100011101100000111010100011101011101100"); });
    it("20", function () { expect(stringSubstitution("10001100111101110100000000100010100000001111111101101100110101011000;011110,010001,010000,11,101,000000")).toEqual("100011001000111111000010001110001111111000000000000100100000000000001000"); });
    it("21", function () { expect(stringSubstitution("10100101101110011000;10,111,00,10,010,00")).toEqual("11111101111111111110111110"); });
});