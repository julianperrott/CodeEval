module CodeEval.MarsNetwork where

{-

Solved using Nearest neighbour & tour improvement, but it is quite slow (1.8s) & uses a lot of memory. 

-}


{- https://www.codeeval.com/open_challenges/164/

Mars Networks

Challenge Description:
 
For the mission to Mars some areas are chosen, where soil, climate, and seismology investigations will be made. These areas are of size 10 000 × 10 000 meters. The probes are sent to all these areas. For the effective work, the probes in each area must be connected to high-speed data network. 

Since delivery to Mars is very expensive, you have to determine the minimum length of the optical fiber cable which connects probes to a network. 

Input sample:

The first argument is a file that contains the space-separated coordinates of the site’s probes, one line per site. X and Y coordinates are separated by comma. 

For example: 

500,8000 1000,9500 2000,8500 1000,7500 4500,7000 5500,6500 7000,7000 
2500,4000 1000,4000 1000,3000 3000,2500 2500,1000 3500,500 9000,6000 
8500,4500 7500,4000 9000,3500 10000,3000

8028,5930 1835,5145 8537,9824 7623,7936 8031,1207

9349,3367 395,3342 3588,3655 9235,2503 1075,6413 2394,8353

9013,3937 7791,872 2417,3183

3416,472 8093,7510 1709,4893 9999,6958 6761,2692 2530,6753

Output sample:

Print to stdout the minimum length of optical fiber cable for every site:

26602

15110

15335

9150

17770

If the length is not integer (for example, 9063. 114), you should round it upward (9064)

Constraints:
1.Number of sites is 20.
2.Number of probes within one site can be from 3 to 250.
3.There can be 2 or more probes with the same coordinates — in such case they do not need any cable to interconnect.

-}

import Test.Hspec

import System.Environment
import Data.List.Split (splitOn)
import Data.List (elemIndex, sortBy,intersperse,sort)
import Data.Maybe (isJust)

toCoords::String->[(Int,Int)]
toCoords line = map(\coord-> (\xs-> (xs!!0,xs!!1) ) $ map(\x-> read x::Int) $ splitOn "," coord )   $ splitOn " " line

sortByFst a b
  | fst a < fst b = LT
  | fst a > fst b = GT
  | otherwise = EQ

calcWeight::[(Int,Int)]->Int->Int->[(Int,Int)]
calcWeight coords n mx
  | coords == [] = []
  | otherwise = weights++ calcWeight (tail coords) (n+1) mx
  where
    base = n*mx
    l1 = head coords
    l1f = fst l1
    l1s = snd l1
    weight l2 = (pp,base+ (snd l2))
      where
        c1 = l1f - (fst $ fst l2)
        c2 = l1s - (snd $ fst l2)
        p1 = c1*c1
        p2 = c2*c2
        pp = p1+p2
    weights = map weight $ zip (tail coords) [(n+1)..]

toSortedEdges::[(Int,Int)]->[(Int,Int)]
toSortedEdges coords = sort $ calcWeight coords 0 (length coords)

minimumSpanningTree::[(Int,Int)]->Int->[(Float,[Int])]
minimumSpanningTree xedges targetSize = kruskal [] xedges (replicate targetSize $ -1)
  where
    kruskal::[(Float,[Int])]->[(Int,Int)]->[Int]->[(Float,[Int])]
    kruskal sets edges itemSet
      | edges == [] = sets -- reached the end of the list
      | set1Index == -1 && set2Index == -1 = kruskal (sets++[(weight,[vertex1,vertex2])]) (tail edges) (replaceItemSet vertex2 (length sets) $ replaceItemSet vertex1 (length sets) itemSet)--  no sets contain either of the vertexes so add a new set
      | set1Index == set2Index = kruskal sets (tail edges) itemSet -- both are in the same set already, ignore
      
      | set1Index == -1 && length (snd $ newSet set2Index vertex1) == targetSize = [newSet set2Index vertex1]
      | set2Index == -1 && length (snd $ newSet set1Index vertex2) == targetSize = [newSet set1Index vertex2]
      
      | set1Index == -1 = kruskal (addToSet set2Index vertex1) (tail edges) (replaceItemSet vertex1 set2Index itemSet) -- vertex found in first set only, add it
      | set2Index == -1 = kruskal (addToSet set1Index vertex2) (tail edges) (replaceItemSet vertex2 set1Index itemSet)-- vertex found in second set only, add it
      | length (snd $ mergedSet) == targetSize = [mergedSet]
      | otherwise = kruskal mergedSets (tail edges) mergedItemIndex-- merge sets
      where
        ed = head edges
        edge = snd ed
        dm = divMod edge targetSize
        vertex1 = fst dm
        vertex2 = snd dm
        weight = sqrtf $ fst ed
        set1Index = itemSet!!vertex1
        set2Index = itemSet!!vertex2
        newSet ix vertex =  ((fst (sets!!ix))+ weight, (snd (sets!!ix))++[vertex])
        addToSet ix vertex = replaceSet ix $ newSet ix vertex
        replaceSet ix newSet = take ix sets ++ [newSet] ++ drop (ix+1) sets
        mergedSet = (fst (sets!!set1Index) + fst (sets!!set2Index) + weight, (snd (sets!!set1Index)) ++ (snd (sets!!set2Index)))
        mergedSets = replaceSet set1Index mergedSet
        mergedItemIndex = map (\x-> if x == set2Index then set1Index else x ) itemSet
        replaceItemSet ixx n items = take ixx items ++ [n] ++ drop (ixx+1) items
        sqrtf x = sqrt $ fromIntegral x:: Float

marsNetworks::String->Int
marsNetworks line = ceiling $ fst $ head mst
  where
    coords = toCoords line
    edges = toSortedEdges coords
    mst = minimumSpanningTree edges (length coords)

{-
main = getArgs >>= parse >>= putStr . process
parse [f] = readFile f
process s = unlines $ map show $ map marsNetworks $ lines s
-}

input1 = "500,8000 1000,9500 2000,8500 1000,7500 4500,7000 5500,6500 7000,7000 2500,4000 1000,4000 1000,3000 3000,2500 2500,1000 3500,500 9000,6000 8500,4500 7500,4000 9000,3500 10000,3000"
input2 = "8028,5930 1835,5145 8537,9824 7623,7936 8031,1207"
input3 = "9349,3367 395,3342 3588,3655 9235,2503 1075,6413 2394,8353"
input4 = "9013,3937 7791,872 2417,3183"
input5 = "3416,472 8093,7510 1709,4893 9999,6958 6761,2692 2530,6753"

input10 = "6384,3907 9609,5052 1880,1064"
input11 = "9709,8359 7542,1403 2984,7747 1415,310"
input12 = "5375,438 8948,3607 4156,3909 577,7180 9055,4364 4232,265 2675,2381 9911,9643 9137,9866 3452,9902 2444,3096 2018,1976 6022,9395 3192,4225 7125,9713 4495,6106 2290,3633 9593,6750 2856,628 6391,8621 99,3177 555,2029 2675,2047 4882,6717 3129,3487 2587,8154 8706,1189 8328,9538 8898,4817 4326,3310 6833,121 230,8607 6662,4894 2400,6095 5734,2101 1988,8016 835,1731 4947,2485 1913,8065 1784,6375 8783,2820 5622,45 894,5542 2268,5530 7835,8954 1337,6571 1551,4160 5574,2752 4652,7644 4552,4445 4787,7411 9499,9448 1254,7496 4026,4150 7058,9321 1452,7614 7321,9546 8290,9532 7870,69 8189,3766 1604,4989 981,339 2262,9644 5480,4034 4968,4276 1790,8217 6457,9488 2374,150 6805,9560 848,1422 1602,3749 5315,1234 1294,3432 1908,8614 8495,7286 9929,407 3358,146 8823,2184 9077,6108 2294,7453 9065,3169 7940,2148 9368,7712 6536,8927 4148,4039 9530,2029 5014,6247 6634,6655 4025,4632 4686,5700 2649,578 2956,4540 4738,4751 5018,4808 953,8528 4931,5188 3943,653 4596,1161 8619,8432 3991,3516 3580,7621 7331,6316 718,8463 671,5402 2471,767 1527,9101 7878,7005 8699,5721 1994,1807 8570,1112 2397,2018 8543,856 6107,7795 4159,1816 5607,9011 4692,2010 492,6223 1889,8796 7759,5827 6695,1342 4042,9527 1595,9294 2788,5411 9918,7480 6623,5889 7479,213 3747,7423 9717,1395 1666,7730"
input13 = "8686,9816 1917,1116 3263,8958 3650,5284 4152,9129 7215,4094"
input14 = "6148,9611 9607,7993 3369,1450 5997,5404 6657,9985 9385,9971 989,7336 8000,8884 1689,5452 4898,7319 2288,2783 4290,4523 4726,7771 6636,8829 6000,3050 7587,9363 9529,4372 8038,5956 6256,9737 6095,9804 1654,4658 3393,7493 8280,6046 3392,4875 2662,2062 3505,5482 4782,3217 1146,6039 3,1611 1549,2733 1602,4078 8819,6736 1432,9322 2801,6957 5587,9509 7317,218 9820,474 8034,1987 3950,9993 7012,2524 5577,3168 3686,2878 626,4869 181,543 9610,4691 427,2741 5234,4019 1604,5618 306,239 1143,4505 3664,3926 6217,1206 347,9641 1160,2001 7875,6981 7551,6108 277,6643 9613,6510 832,3093"
input15 = "4967,4343 1503,2992 9273,3618 1707,2340 1189,2073 735,6746 6522,8719 2920,1777 2483,8718 6337,9024 7575,4322 4526,1896 6992,5984 7524,2233 1475,6062 2196,5896 2838,9129 731,3706 4380,8472 6759,1470 9253,4545 1214,550 8791,7651 8947,2761 741,5885 8512,1581 8592,8333 568,5118 2279,7792 1030,6044 220,2774 4677,6381 4079,8187 7232,3042 9847,9044 2540,434 5248,9146 8717,9546 5937,225 5731,9573 9219,3022 8861,3278 8575,3208 6416,8224 3022,3942 164,1325 3292,1134 1602,9418"
input16 = "609,2375 3279,745 2822,2452 7375,5310 8325,3050 6991,1320 3512,3844 68,3354 2161,5779 7222,3067 2384,2021 2956,5362 4792,7443 6252,7729 8823,464 7828,8376 1362,1612 7563,4034 1943,8369 8779,3667 2240,1190 5892,4705 4154,5283 6623,4187 1774,9304 1107,9342 4436,2307 6254,5990 3318,2135 1340,598 5554,762 8990,1705 4144,2432 3559,3824 1892,1221 5876,9953 7629,2132 642,6188 3664,4150 3907,6547 5555,5063 6823,5072 7379,9855 1107,9593 4616,2091 5621,4388 1948,3346 7411,6358 8559,4488 9912,847 2061,4328 6869,3759 4412,6529 3807,7894 2686,8452 9309,8813 2637,2012 2312,5288 3206,4564 3112,9568 8325,6767 5510,2238 4835,6598 9495,926 7026,574 7589,4457 4405,8806 2435,3308 6757,6107 375,7476 1516,625 9106,416 5210,3183 8840,5627 5607,1713 7890,9931 368,388 7150,1857 5137,7706 5261,1337 5422,3243 1189,5491 748,3848 8890,2412 6058,9236 4283,4731 4488,2939 9986,4765 1156,85 7113,4593 6262,9607 1634,1870 4901,1004 8709,8890 656,9924 2623,481 435,8340 4471,3609 2264,4884 4197,3296 2248,2795 7424,367 1396,8338 7059,7715 230,2822 6870,7542 9809,3673 2358,3174 4150,9910 2864,7158 5837,1371 9705,6490 6726,9624 264,9749 962,4494 4558,1659 7494,8429 3300,3264 9598,3557 9483,4180 440,4403 7348,3476 7456,4533 6770,71 4181,4903 6500,4679 5279,7570 9107,1255 631,7462 8408,5169 9910,9664 176,6449 2206,148 9226,8968 1154,4307 9861,1556 9981,4894 5394,1776 3187,1918 3300,4118 9097,3597 6936,3252 7846,1999 2688,168 6225,5812 1693,1913 3064,714 8984,4227 9246,3411 7295,3348 7273,6080 7392,3648 9296,2078 7352,5440 1486,6890 9051,4521 2307,9591 2121,5794 8640,6187 6098,5383 5157,3014 4790,5042 2613,6643 5608,5054 9817,9216 8343,9343 4790,8381 1793,6340 6345,6006 2944,4240 3109,2956 4405,1872 1566,7533 5521,8711 5795,4714 8014,4354 7855,1365 1449,7553 2434,1957 9494,5792 9797,9749 2662,55 4611,779 5353,9849 2465,8649 2283,149 4684,842 8774,4623 2671,2010 6365,3259 6384,2146 7547,6306 6197,3948 6708,9994 5705,4118 1247,7377 2543,2143 9352,9316 9266,7641 4749,6169 1907,7147 5218,8513 6725,6293 4650,1113 230,6877 3878,7979 3379,8436 1432,9818 7677,3090 2194,7969 1315,3161 1725,3049 7884,2626 8401,9685 4456,703 4647,6682 6242,2940 7212,4109 1676,2888 8247,7407 3290,3167 2142,1545"
input17 = "20,5336 9830,7580 1476,890 1944,3079 1308,9866 8457,8654 7799,5734 9736,1823 401,1854 3950,3498 2838,7798 2105,2257 1361,9021 6705,2425 1643,4266 2538,9063 8642,6566 8925,2604 5775,9012 8807,8294 2025,15 7546,5975 2130,5222 9621,7082 8126,9512 2625,8417 5221,364 1080,4910 7988,4831 5129,5174 20,8733 6452,7866 45,2239 8134,3507 1352,7422 2022,4194 5177,8225 9624,6351 6713,7209 9884,2186 6220,6347 8014,1765 4273,5318 5734,9834 1334,4965 1298,3336 9438,7172 3978,3265 4958,9291 1834,109 1748,4240 8696,2694 7458,2565 7038,364 8396,9528 6952,5529 9374,9696 8327,2613 7332,3518 4439,7319 1940,9016 4425,2931 5475,1119 7966,5545 5855,5125 452,7253 4326,1048 790,5230 9860,3574 3358,6591 6230,5690 3450,2994 5390,953 9107,8471 9816,8299 9909,4706 4444,5385 8553,3525 1089,3603 8695,7500 8689,6706 3236,3285 4838,4212 8179,4015 1012,951 6713,5801 6040,776 3294,8861 8700,5341 215,5403 9361,8843 9588,3244 9638,4003 7839,7554 5754,5055 4854,4802 9706,3318 2787,4772 7227,6424 2127,7882 3343,5228 5554,1663 4107,6533 7070,9464 1165,651 5213,446"
input18 = "8694,4408 6571,748 2586,4128 4928,3238"
input19 = "5549,4098 1585,309 2467,770 7099,9908 3006,3103 6218,7714 8148,3504 8427,391 3831,2878 1944,993 2171,499 8672,4318 6322,3302 8002,1409 3267,8753 4884,6430 1967,110 5629,8091 9175,1858 1447,8934 9125,929 864,8532 8712,9147 6538,3029 6961,7225 4429,2094 8247,215 2840,4126 2408,3267 3279,8295 8881,540 3513,4352 1889,1895 2571,3275 4886,348 7502,2044 5422,4596 1568,3268 5302,1506 1667,3736 3723,3621 8906,3105 7160,4246 1471,4370 159,5203 1397,5605 9303,1318 240,7155 9028,9642 7094,2382 4168,5049 3595,1449 4917,4582 4883,8559 5440,6979 8975,8131 4775,6099 1357,3179 5981,5520 7257,262 5831,7865 3633,1253 237,9720 377,8360 9434,402 4066,4249 7400,3885 7293,5648 6760,3451 8022,8093 2001,601 4317,3855 2800,2760 3702,5329 9058,3878 3383,5309 9300,5085 1721,7467 6200,4147 7714,9402 5506,3203 56,9306 9449,4684 9947,3187 2221,8415 1473,3077 7229,8646 1056,5503 9351,918 2722,7716 4737,704 2999,1543 8051,101 3598,5838 9129,8264 7097,2906 3706,819 901,9117 6080,2139 7967,5799 3343,8350 1033,3446 187,715 3365,9316 3720,5479 7099,9908 3371,1978 4252,332 1283,7284 3875,5349 4825,3478 8313,5261 6273,9745 1197,3078 2095,6201 2369,6183 50,4020 4693,6247 6732,7281 7173,1602 2105,214 7351,525 5335,1249 5397,7857 2804,5145 3860,7740 3257,3092 9338,4766 4947,1010 4936,2765 1376,279 821,1375 9260,905 2062,2669 7076,6677 8616,5678 339,5793 7088,8446 4154,9098 3470,1381 3888,3953 5700,1768 1236,7652 3387,5220 3005,1584 3348,6749 9122,9628 9177,1143 8971,1361 5698,7709 5298,2142 9148,6541 4288,3469 4711,2633 3786,6407 3139,9363 2273,6866 3217,7011 2388,4554 6566,7862 4448,3477 9302,3752 3215,5198 5531,8373 1316,9283 510,824 7421,9233 8782,8921 1050,7382 7266,4105 2474,8182 1551,2575 6628,9138 2101,2262 7410,1639 8029,9740 9353,1127 9123,1736 9822,9362 8239,6990 6111,4616 5335,6934 9828,3277 7882,9823 1930,3367 9005,5327 7314,6006 8551,8243 1780,7375 1653,1949 3596,1903 9501,3934 1993,7036 279,9554 9142,5588 1343,2167 7335,577 8626,4860 9283,2436 9032,7481 2997,9434 410,3375 225,657 7436,5405 7610,7812 8429,7368 6574,9419 8741,8929 1158,8948 9544,9924 6986,60 6712,1806 4677,5633 4177,1299 3149,2696 3900,9188 5379,3842 4591,3361 5851,5400 536,2496 403,5506 7602,2465 8829,2751 7639,5039 1944,4812 3419,5673 6408,5530 7386,6965 1946,780 3201,8574 139,7565 3677,8135 4678,631 1986,8629"
input20 = "9353,540 3873,7832 169,426 4960,4193 9102,8249 9002,6744 3957,4203 6383,2245 1574,8676 8174,1633 2722,3342 746,3727 5421,432 9113,6379 2292,2095 5857,8707 6111,9937 2177,9704 3763,1528 5773,5111 761,5575 1297,9885 6581,5487 1789,5832 6727,4227 2908,7821 7926,4556 7749,415 7557,457 9266,3168 9707,9582 4843,7798 2880,3391 5599,2132 4105,8636 1153,3938 455,6913 1085,9522 7680,2627 4003,6464 3048,8347 1629,5405 6714,5948 6017,1609 9204,9654 2787,7906 5420,6805 3187,4647 6444,9893 1971,1629 6276,9614 9733,3578 8705,7073 6482,906 6314,8333 7918,9490 7397,8404 8985,1570 1637,7310 7268,852 7228,6972 4519,6133 347,1642 6506,2379 805,6466 4897,204 1966,1893 9000,8493 8747,629 6909,2896 6425,1853 2360,2681 6968,7197 6070,3872 3415,5371 6672,2799 8495,6178 1753,1596 7925,1322 9995,5365 6637,7982 3068,3952 8279,7158 7114,1171 2076,5356 2427,4191 421,8863 5679,4336 7367,6841 1013,2579 7088,8543 4570,1691 9589,3022 6038,8393 2691,1851 2859,3920 6231,9342 9651,3316 1730,6248 947,8425 7798,5111 8339,5534 7875,4979 4503,2143 6501,9677 8502,3965 6235,3272 1899,1487 7897,3537 9732,3154 5105,5868 5356,5554 4395,2381 8798,5365 9731,428 9505,2308 6118,5207 3302,2794 6524,1071 7776,3978 7563,2840 2661,5114 6106,236 9209,258 3382,9813 7240,5656 8525,3395 4363,8920 5445,5782 7318,7759 3536,2517 9370,7776 5710,8886 4534,6910 7077,3153 7573,6701 4197,7648 8090,8937 1453,1780 5615,3397 7885,3130 3692,4892 1192,5657 4310,9874 3549,3338 8589,3325 8398,6518 8152,2309 4336,8684 9352,485 6041,2908 9969,402 3150,8323 9383,1137 1987,3195 8088,5214 4789,1390 8914,2627 9850,2458 240,3626 3573,3616 3000,1987 6751,6016 7652,7769 484,6841 4895,5041 5578,9038 6267,3141 5779,7802 4695,50 1702,5538 753,970 3062,1970 5770,5268 9907,6757 2497,7921 450,5615 8644,4836 1728,5865 2423,6507 5435,4104 3192,195 3554,9690 3729,4256 1634,4217 46,3280 6941,1558 4319,2850 6098,7850 7621,7856 6254,2939 128,946 6317,8957 3900,7480 2618,2623 2387,4859 8797,2628 2475,9743 4000,276 2568,3397 2597,6087 5471,6331 9571,7165 4822,1591 104,2099 4869,4358 3922,2656 9443,5139 4053,4259 2143,3079 992,3343 1680,4002 7072,7148 8573,4496 9686,8809 9741,4478 4738,5883 2969,5550 6423,6638 1427,7235 5728,601 7033,1488 2597,5356 9175,4108 5082,6609 8685,2307 1515,1749 7883,3206 6100,699 7775,9401 5718,7075 6449,9300 8632,7093 6058,8179 4687,8938 3910,5530 7175,6680 3560,260 1478,4626 5355,308 6456,168 975,6704"
input21 = "3175,3189 2244,1806 3052,1550 5703,5327 5991,2833 917,4072 1025,6663 67,9783 9718,8412 4063,1316 5524,5932 5305,5345 770,8803 7782,128 3572,6010 97,180 2840,5324 1398,2216 4578,3434 7276,496 828,1291 6295,547 3355,81 4870,5735 3649,6781 6047,9562 1200,6315 1934,3324 8293,2484 139,5403 7168,2013 7616,2183 6564,8325 9472,6064 2296,7320 7795,6280 6286,6082 4742,42 6678,1401 2436,7029 568,4221 8719,3766 633,2007 9536,458 9408,4746 5076,8383 1546,4246 5248,2592 5403,6027 5018,962"
input22 = "2619,9599 9867,2235 3257,4000 6456,3088 7272,9336 8015,195 482,8236 6303,9002 1436,6397 4930,7249 4122,5592 7329,4061 7500,7777 4325,9587 4587,399 2892,7897 5316,6630 1742,3231 2812,8884 688,4326 64,2485 260,8726 2149,815 1162,6557 212,3569 6425,4017 9047,8679 9656,75 3047,2031 9441,8067 7124,2331 1039,3310 631,316 8688,9743 3116,8150 6174,5332 5497,2181 5822,1849 8058,4481 1277,5539 8149,2227 5824,9017 1827,7066 92,8875 3730,2831 2808,5837 2330,7746 343,2249 6513,6066 3543,4444 90,498 5354,9008 2233,5293 8530,241 7760,3029 852,9121 2152,5971 8260,9357 9819,5983 9228,2088 5210,4760 8528,8570 7549,2028 7799,9111 1680,6898 202,2539 9447,1508 403,3395 7642,8247 9643,2829 540,4405 168,3123 5459,9265 4924,544 619,4115 924,3170 77,1325 5870,9063 201,5343 4981,5767 7853,9159 8212,3763 795,8076 1696,8407 7580,9187 4176,5717 9559,3947 6494,4851 9698,8979"
input23 = "7614,6407 3955,422 3427,4006 6596,952"
input24 = "6616,436 1129,6422 6507,4722 9184,4562 9008,6838 1521,6769 8886,5898 8508,8554 4815,9809 4919,7361 2685,4700 3706,9947 7214,2377 1139,123 9083,3185 1704,6263 2443,9141 2080,1180 6152,4935 2425,9142 171,8689 8977,9988 861,5528 3243,2305 7628,2072 7332,2627 3232,7491 1482,9000 6401,2861 7812,4956 8191,4140 5983,2487 1762,4364 7948,4234 334,4302 5843,2742 9143,2575 6839,9239 217,7842 5342,5128 2586,1588 5805,3162 1005,8593 6249,8493 3493,6144 693,5162 899,1267 6319,8718 2834,4717 2067,771 9159,2416 4920,4402 8335,1022 8736,1761 5970,810"
input25 = "7552,8361 6484,4480 1450,1113 7833,5708 4721,3751 6380,71 8245,2091 811,1777 6164,2829 5359,1955 4757,9723 2558,3325 9789,4372 5119,4200 8263,2520 5845,9642 204,1596 9925,8601 4755,9763 8584,5739 9043,1779 9743,4911 4707,9513 5933,779 5628,5692 8684,4375 75,552 7438,2864 9669,4256 8015,9622 3511,3477 806,3311 3276,660 7577,9145 8366,1285 3550,327 8385,3148 5808,8825 6316,4662 7599,7411 5629,9560 2214,2426 7125,8158 7726,3870 7708,3495 9237,1407 4807,946 8204,5682 8901,5014 3172,7386 2853,6805 1048,800 4268,3659 2226,9635 4977,9820 7478,365 8212,867 733,8720 1562,3520 2732,1800 3859,9711 8795,4114 123,8000 6536,1358 6571,6945 289,2877 3090,8964 805,1627 1759,226 201,2775 9796,4845 4230,9489 8804,1772 9333,2769 7434,3181 1846,2669 8568,4712 6468,1987 3434,9604 9851,8026 6519,1656 7139,9703 4172,91 8805,6340 5755,2260 7724,1713 4354,8403 596,6731 3230,2202 578,1370 5776,583 5627,7783 6876,2682 3326,1208 294,2285 6103,6589 6160,4634 3182,3489 3848,8407 4350,5232 3031,4084 181,4892 1181,9381 1284,7087 7769,7103 2770,5081 8978,4849 562,2623 7621,7979 7249,5494 1425,684 5146,6175 3206,9355 9739,1128 6999,4061 6353,2060 6715,4046 7499,3667 3205,4386 1092,9442 8119,5345 7342,9895 2318,8756 9834,8121 8968,4239 350,4765 8789,9963 8796,4516 7115,5537 6484,474 779,9770 7354,5714 4317,4497 7067,8488 885,7553 1606,8 5106,2426 4461,8009 6781,8780 4272,7602 7584,3459 3261,2893 2018,5280 6087,524 4218,8340 2414,6595 5350,4547 8245,4633 2369,9959 9325,4019 389,8716 8780,4101 8942,1247 8294,5600 6960,3819 7382,1794 9932,8384 7394,9799 7401,9330 5665,8672 6543,6211 1083,3518 2178,3192 2980,3843 4374,4122 7964,1066 7602,6498 8288,2957 3642,8277 8324,2255 4586,4870 9198,1235 3398,4755 1466,1336 2935,8088 6315,2023 3334,1026 8250,7907 3175,7589 3598,708 9470,534 1815,5727 7732,6967 9199,334 2131,2462 1999,1005 3944,5326 5989,7584 1187,9889 9839,9713 5605,5594 4910,7982 5456,2917 4541,4706 7155,7759 7129,2772 1303,6162 5972,2965 7267,2969 5314,5272 3948,6705 4262,4544 3932,6738 1868,677 7242,9985 5248,6702 1820,7524 5301,4450 1709,1660 4776,3158 4331,7370 4765,100 7313,2538 9691,3151 7224,4959 7450,7743 7277,869 7076,1491 1474,3645 5741,7537 9509,3186 917,4990 2832,2755 4975,1365 2742,631 6715,3168 2589,7285 9873,2506 8418,6831 8511,4512 6749,7565 8873,1092 7401,9445 4114,7844 665,4532 9168,128 4463,5415 1270,1172 5680,6108 5477,6392 7311,3093 3751,8831 5624,2167"
input26 = "6079,7237 9634,1934 6594,7457 6860,4443 9359,9620 7918,2756 6608,3496 7406,38 5319,1004 2511,3491 7239,1032 141,2143 114,564 7580,3914 5186,158 4098,7232 1725,1807 5202,5507 4076,3819 8175,3439 6337,2976 7607,84 1475,1896 9122,3688 6116,1934 3969,7472 325,471 1177,4834 5261,4693 5913,9346 3556,8149 5597,5299 7189,9547 7631,8797 7276,2243 5704,2339 1156,6091 5452,5428 8364,8745 7632,7040 7984,7461 8672,2369 4064,6635 7191,1170 7436,7770 7718,8388 2884,2251 2762,6992 2061,998 6633,2771 4617,6408 7103,4014 613,2555 8344,6382 1937,7822 3462,3392 8612,1906 1461,6943 5911,5076 5087,8834 6622,4851 5153,54 80,95 7427,531 8761,1075 3665,9717 1403,961 9847,5253 4250,8844 4577,5133 6410,9469 9225,7178 1574,7383 4146,7461 8338,3122 9283,2095 5558,6351 7561,6708 383,3807 9836,5619 5148,995 4514,3641 9471,544 8773,5630 716,6976 5117,90 8823,3908 3759,3992 2780,7776 1207,4206 8582,9195 4977,3782 3574,205 2515,343 7678,1171 798,1521 2272,3277 8270,9118 6501,4048 4262,779 1127,9014 5344,7383 8134,3489 5953,7470 1107,1786 1692,9398 9408,6846 5393,9596 6207,7714 5023,1993 1156,5167 7695,6364 2098,3656 6938,9812 5101,8679 6295,661 775,7263 7959,851 731,1590 3516,6437 8911,1226 6805,2435 6410,3488 5169,5843 4286,4204 8290,6991 6761,6946 5605,1035 1907,3195 3386,6347 4047,4524 8349,4737 6680,9780 4564,3920 6982,9894 1728,4331 6426,6671 7956,8050 2743,3932 5172,6086 6973,5444 3110,4769 4461,9555 3481,9599 6271,6890 5969,1884 5864,1142 2717,6708 4572,8625 979,6479 5165,1665 5447,1773 4899,9259 8225,8278 3708,5607 5030,6536 6917,2146 5024,5254 1102,2409 9551,8684 7399,1897 7675,8494 5656,9236 3029,6842 5633,1778 1530,4719 7439,5945 564,5248 6573,4100 976,2575 2408,1133 5129,7531 1,3005 3715,4969 6113,5506 7217,4330 4565,2027 1260,7820 273,3946 8605,8618 9811,8438 1652,9184 7553,4539 8581,9568 756,6261 926,7700 8259,808 6172,7060 4423,278 8748,4480 7569,7935 1869,8449 6655,6139 8221,9004 7631,3725 4657,9397 9867,3119 5254,3605 7495,3523 4090,1829 4496,9310 6066,5496 6731,866 2492,9060 1005,4610 2360,470 4063,9530 2893,1238 8211,8053 7099,2740 1605,6672 1008,9835"
input27 = "2405,2387 819,5160 1262,7032 2378,1025"
input28 = "8486,245 7864,536 4799,9727 3622,5666 2076,3450 3940,8668 4665,4265 5811,141 1440,9268 3482,1969 7414,3395 6964,6325 9665,8873 2527,7609 14,4638 2736,4235 1714,3612 7096,6047 3227,1080 2785,6145 7659,1655 4707,7755 6884,9129 5381,7173 5492,6424 6829,862 2665,7837 2907,5034 8948,5037 1686,9455 4147,2968 7376,623 984,974 2436,8809 4957,3096 6837,9980 4085,8905 8540,2843 65,7123 8711,1624 6265,8141 6188,5174 5792,8586 1371,8930 6842,4379 9446,6900 4638,1474 9825,951 95,6679 4119,7587 1737,7748 7531,5695 8807,5837 3572,3693 7535,9432 9257,6127 5117,499 1804,8432 3006,1280 9997,8893 206,5513 6002,8731 2869,258 4394,1835 7931,5979 9165,200 3382,3388 868,3767 9747,5575 7,8299 7052,7101 7796,3552 5255,3034 6979,6628 2677,9640 4207,4312 9252,2550 8075,1763 54,9018 3042,1829 4124,4809 9073,8098 5079,4332 4695,5076 1302,3434 9736,6621 811,1317 2757,1299 3610,1606 2116,6310 6693,2314 7605,1352 7195,90 4622,6167 7843,9260 2728,9551 4540,2052 6904,8251 4854,3338 4679,6187 888,9684 2301,3477 3803,8823 3738,8443 9088,6203 4860,4474 3571,7477 2104,7749 7356,9786 5234,0 215,610 2691,1953 6879,1025 3297,868 8873,527 1692,5664 4574,8426 8740,8775 2079,6252 1215,9736 8756,7040 1154,371 1024,3983 8458,6502 3371,7391 7889,8372 4653,5538 789,1106 6881,3336 8273,1417 5691,4842 8042,258 4560,5438 4673,2042 2941,282 9803,9999 8844,2125 1424,8458 3503,3631 8989,5765 5551,9874 7619,7612 6551,743 4385,5728 9998,3873 5209,3179 4931,1299 2566,9596 2901,8702 4634,689 8549,4747 1723,6078 5372,4615 2876,9693 9987,5932 1568,492 8814,6550 2074,8224 1084,8377 3693,9455 5033,3690 4484,1901 9352,6114 5208,3401 9059,8968 9886,946 5053,4928 7285,2879 2099,8143 96,2800 2129,4205 5064,2319 5195,6586 783,2464 5896,6030 247,8620 7651,1009 2323,8949 7979,4494 172,8884 3553,837 7623,4151 7766,2662 6039,3181 8881,3716 2057,6363 5529,7476 343,3917 1093,3530 5774,1453 4700,5478 7376,4806 256,7220 5266,3161 6672,1551 2691,2449 2597,2172 9227,7803 3265,4530 3684,5908 4344,1981 5953,9284 8679,3365 532,1819 433,7178 8251,5641 7079,8700 4224,9919 5282,6261 3371,8910 5150,3285 7286,258 1611,2358 1325,5776 2672,6915"
input29 = "2217,2299 168,679 5579,7176 3552,9711 8579,2715 623,8583 1134,9673 774,7399 1162,3390 1784,4926 3593,4302 1146,9589 2029,7075 3258,4809 1013,2678 7939,4928 3260,9277 5906,9371 6902,6246 9454,4583 3686,8238 5989,6322 8527,3912 5054,1754 6086,3900 8979,7621 6350,4993 4526,5250 1918,2194 2706,380 3963,5846 9596,9539 7513,3083 5063,8857 6744,9639 6884,9820 8959,4858 7637,24 4450,8209 508,9422 4388,5960 9890,8498 2896,6160 4704,3333 4812,9103 2952,2840 2056,6743 9344,4089 8241,1418 6821,5883 4020,3640 8584,2591 3034,1059 7088,5231 3842,4479 4529,6594 6181,8034 8181,5133 4296,5287 9372,972 4538,431 719,5384 4857,4849 5980,1936 7803,7240 9681,5482 554,7916 3027,4010 9634,9264 9780,4692 1713,8888 7026,1812 3154,7909 6988,7175 9326,161 7457,6435 4900,8585 4913,8930"





test = hspec $ do
  describe "parse - " $ do 
    it "minimumSpanningTree" $ do minimumSpanningTree (toSortedEdges (toCoords input3)) 6 `shouldBe`  [(15334.409,[4,5,1,2,0,3])]
    it "marsNetworks1" $ do marsNetworks input1 `shouldBe` 26602
    it "marsNetworks2" $ do marsNetworks input2 `shouldBe` 15110
    it "marsNetworks3" $ do marsNetworks input3 `shouldBe` 15335
    it "marsNetworks4" $ do marsNetworks input4 `shouldBe` 9150
    it "marsNetworks5" $ do marsNetworks input5 `shouldBe` 17770
    it "marsNetworks10" $ do marsNetworks input10 `shouldBe` 8749
    it "marsNetworks11" $ do marsNetworks input11 `shouldBe` 20263
    it "marsNetworks12" $ do marsNetworks input12 `shouldBe` 76641
    it "marsNetworks13" $ do marsNetworks input13 `shouldBe` 17458
    it "marsNetworks14" $ do marsNetworks input14 `shouldBe` 56705
    it "marsNetworks15" $ do marsNetworks input15 `shouldBe` 49541
    it "marsNetworks16" $ do marsNetworks input16 `shouldBe` 101846
    it "marsNetworks17" $ do marsNetworks input17 `shouldBe` 69570
    it "marsNetworks18" $ do marsNetworks input18 `shouldBe` 9433
    it "marsNetworks19" $ do marsNetworks input19 `shouldBe` 99750
    it "marsNetworks20" $ do marsNetworks input20 `shouldBe` 104082
    it "marsNetworks21" $ do marsNetworks input21 `shouldBe` 52247
    it "marsNetworks22" $ do marsNetworks input22 `shouldBe` 64032
    it "marsNetworks23" $ do marsNetworks input23 `shouldBe` 11143
    it "marsNetworks24" $ do marsNetworks input24 `shouldBe` 50707
    it "marsNetworks25" $ do marsNetworks input25 `shouldBe` 102183
    it "marsNetworks26" $ do marsNetworks input26 `shouldBe` 96334
    it "marsNetworks27" $ do marsNetworks input27 `shouldBe` 6481
    it "marsNetworks28" $ do marsNetworks input2-8 `shouldBe` 100282
    it "marsNetworks29" $ do marsNetworks input29 `shouldBe` 62930




