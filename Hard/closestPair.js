/* https://www.codeeval.com/open_challenges/51/

Closest Pair

Sponsoring Company: 

Challenge Description:

Credits: Programming Challenges by Steven S. Skiena and Miguel A. Revilla 

 You will be given the x/y co-ordinates of several locations. You will be laying out 1 cable between two of these locations. In order to minimise the cost, your task is to find the shortest distance between a pair of locations, so that pair can be chosen for the cable installation. 

Input sample:

Your program should accept as its first argument a path to a filename. The input file contains several sets of input. Each set of input starts with an integer N (0<=N<=10000), which denotes the number of points in this set. The next N line contains the coordinates of N two-dimensional points. The first of the two numbers denotes the X-coordinate and the latter denotes the Y-coordinate. The input is terminated by a set whose N=0. This set should not be processed. The value of the coordinates will be less than 40000 and non-negative. eg. 

5
0 2
6 67
43 71
39 107
189 140
0

Output sample:

For each set of input produce a single line of output containing a floating point number (with four digits after the decimal point) which denotes the distance between the closest two points. If there is no such two points in the input whose distance is less than 10000, print the line INFINITY. eg. 


36.2215

*/
var mergeSort = function mergeSort(points, comp) {
    if (points.length < 2) return points;


    var n = points.length,
		i = 0,
		j = 0,
		leftN = Math.floor(n / 2),
		rightN = leftN;


    var leftPart = mergeSort(points.slice(0, leftN), comp),
		rightPart = mergeSort(points.slice(rightN), comp);

    var sortedPart = [];

    while ((i < leftPart.length) && (j < rightPart.length)) {
        if (comp(leftPart[i], rightPart[j]) < 0) {
            sortedPart.push(leftPart[i]);
            i += 1;
        }
        else {
            sortedPart.push(rightPart[j]);
            j += 1;
        }
    }
    while (i < leftPart.length) {
        sortedPart.push(leftPart[i]);
        i += 1;
    }
    while (j < rightPart.length) {
        sortedPart.push(rightPart[j]);
        j += 1;
    }
    return sortedPart;
};

function euclid(p1, p2) {
    return Math.pow(Math.abs(p2[0] - p1[0]), 2) + Math.pow(Math.abs(p2[1] - p1[1]), 2);
}

var closestPair = function _closestPair(Px, Py) {

    if (Px.length < 2) return { distance: Infinity, pair: [[0, 0], [0, 0]] };
    if (Px.length < 3) {
        return {
            distance: euclid(Px[0], Px[1]),
            pair: [Px[0], Px[1]]
        };
    }

    var n = Px.length,
		leftN = Math.floor(n / 2),
		rightN = leftN;

    var Xl = Px.slice(0, leftN),
		Xr = Px.slice(rightN),
		Xm = Xl[leftN - 1],
		Yl = [],
		Yr = [];

    //separate Py
    for (var i = 0; i < Py.length; i += 1) {
        if (Py[i][0] <= Xm[0])
            Yl.push(Py[i]);
        else
            Yr.push(Py[i]);
    }

    var dLeft = _closestPair(Xl, Yl),
		dRight = _closestPair(Xr, Yr);

    var minDelta = dLeft.distance,
		closestPair = dLeft.pair;
    if (dLeft.distance > dRight.distance) {
        minDelta = dRight.distance;
        closestPair = dRight.pair;
    }

    //filter points around Xm within delta (minDelta)
    var closeY = [];
    for (i = 0; i < Py.length; i += 1) {
        if (Math.abs(Py[i][0] - Xm[0]) < minDelta) closeY.push(Py[i]);
    }
    //find min within delta. 8 steps max
    for (i = 0; i < closeY.length; i += 1) {
        for (var j = i + 1; j < Math.min((i + 8), closeY.length) ; j += 1) {
            var d = euclid(closeY[j],closeY[i]);
            if (d < minDelta) {
                minDelta = d;
                closestPair = [closeY[i], closeY[j]]
            }
        }
    }

    return {
        distance: minDelta,
        pair: closestPair
    };
};

function closestPairDistance(pts) {
    var Px = mergeSort(pts, function (a, b) {
        return (a[0] < b[0]) ? -1 : ((a[0] > b[0]) ? 1 : 0);
    });
    var Py = mergeSort(pts, function (a, b) {
        return (a[1] < b[1]) ? -1 : ((a[1] > b[1]) ? 1 : 0);
    });

    return Math.sqrt(closestPair(Px, Py).distance).toFixed(4);
}


/*
var fs = require("fs");
var setCount = -1;
var points = [];

fs.readFileSync(process.argv[2]).toString().split('\n').forEach(function (line) {
    if (line !== "") {
        if (setCount == -1) {
            setCount = parseInt(line);
            points = [];
        }
        else {
            var args = line
                .split(" ")
                .map(function (arg) { return parseInt(arg); });
            points.push(args);

            if (points.length == setCount) {
                setCount = -1;
                console.log(closestPairDistance(points));
            }

        }
    }
});
*/

describe("", function () {

    function toPoints(ar) {
        return ar;
    }

    var r0 = "65.0692";
    var r1 = "122.0041";
    var r5 = "31.0644";

    var s0 = [[5377, 11246], [36540, 31251], [15930, 10155], [7843, 26662], [32680, 22990], [21264, 22812], [21463, 4224], [34342, 37092], [14165, 37180], [8876, 23624], [6846, 13362], [6344, 7987], [3781, 19871], [3468, 37179], [33305, 6988], [1203, 24862], [5135, 14921], [1682, 16808], [23068, 19177], [34487, 11417], [25902, 10324], [35122, 2170], [25407, 32886], [3496, 7905], [26773, 1011], [21092, 2526], [39668, 8300], [11797, 23305], [24215, 24046], [5708, 4264], [16069, 35336], [33394, 15451], [28661, 1170], [11156, 34896], [25482, 4183], [31432, 26769], [39252, 14666], [7368, 32508], [5983, 445], [15124, 31225], [32431, 3394], [993, 36703], [30566, 20370], [9050, 37263], [16142, 11058], [133, 29103], [4615, 38746], [3751, 23140], [22090, 16217], [852, 33117], [7326, 27681], [28447, 23825], [27264, 5206], [28525, 38040], [27609, 66], [28809, 39746], [22808, 30659], [36250, 17380], [4843, 10653], [32812, 7420], [13743, 38567], [37061, 27775], [28327, 6667], [32820, 21583], [38599, 13591], [17879, 30654], [33860, 28220], [35801, 19099], [8365, 20034], [4509, 36799], [30830, 11115], [1679, 2143], [185, 18], [30474, 3610], [12253, 19442], [5273, 32779], [39531, 27792], [22971, 10444], [37276, 21611], [10993, 15269], [239, 21130], [34096, 2705], [24889, 4466], [3394, 2129], [7747, 29853], [31039, 37871], [25761, 29667], [1693, 7078], [1282, 2530], [168, 22218], [36804, 19351], [30823, 24521], [7101, 34190], [564, 32570], [18553, 8739], [34864, 39402], [21483, 27327], [36270, 39388], [4249, 362], [14890, 18909], [30658, 22224], [34473, 37256], [30882, 14405], [32870, 13435], [15670, 6076], [9472, 27036], [5276, 9179], [13055, 33862], [33793, 1500], [7259, 36142], [20823, 31945], [29611, 5888], [3647, 31241], [6803, 5100], [38796, 3570], [1867, 38111], [37754, 21626], [34160, 38818], [27378, 5615], [24675, 22485], [6303, 38310], [1447, 18359], [12354, 12454], [33603, 24072], [28876, 3931], [13883, 34363], [13051, 24174], [25164, 31491], [17238, 13123], [19877, 6883], [38543, 12803], [20712, 31240], [39068, 919], [445, 26993], [4159, 37903], [13492, 35901], [15911, 31191], [3210, 38166], [29707, 17077], [36329, 36775], [33530, 19047], [37680, 32582], [19297, 33118], [31865, 12446], [38150, 17262], [21155, 3709], [22254, 9338], [35611, 36819], [32446, 7327], [34196, 18251], [23387, 3712], [21272, 23418], [15445, 13120], [11457, 24913], [10275, 16490], [7595, 38876], [27850, 689], [36443, 10917], [20534, 8498], [733, 32381], [19799, 12105], [583, 27455], [20610, 5049], [1565, 20659], [36210, 7875], [36353, 15019], [29846, 18509], [28976, 15209], [23041, 36054], [477, 5304], [14644, 682], [26442, 1228], [33856, 29636], [9045, 32152], [14536, 12270], [28575, 19470], [12230, 13029], [14985, 11731], [32634, 29407], [17983, 16321], [34237, 12105], [16157, 14974], [23648, 36822], [36092, 34148], [1121, 14352], [36122, 15585], [10898, 37903], [24471, 12674], [22751, 7103], [26436, 20419], [9922, 5445], [3745, 25992], [2387, 18710], [29777, 39891], [6814, 11666], [14493, 663], [32823, 27101], [7120, 12883], [37760, 38208], [29699, 25183], [4363, 23372], [11751, 24516], [36092, 7354], [20193, 3706], [24760, 15100], [6208, 31047], [3673, 5026], [39988, 12164], [694, 37135], [30802, 9221], [2000, 17993], [30560, 38795], [31256, 1246], [17794, 35685], [4599, 32714], [39734, 1054], [16011, 32917], [32969, 35833], [33510, 32654], [26071, 14005], [1182, 39978], [22859, 23992], [15273, 16835], [20207, 30065], [15125, 37685], [36814, 25129], [6036, 9117], [22419, 6468], [24669, 12974], [27043, 24961], [21034, 23804], [14748, 28849], [32596, 31487], [7869, 27276], [8902, 33375], [39215, 36395], [19393, 18520], [8352, 21886], [17188, 38803], [9653, 32867], [6055, 7142], [29521, 13684], [22936, 12653], [22784, 13833], [28307, 34761], [5319, 2602], [3203, 17331], [13511, 30907], [8135, 10452], [15332, 34477], [7722, 11519], [16550, 7596], [38375, 6230], [21263, 24094], [20196, 37338], [24513, 26681], [15198, 28897], [37607, 9261], [24329, 30588], [27983, 32512], [15140, 18417], [7313, 9347], [31293, 825], [22639, 7746], [21946, 35088], [26059, 34849], [21066, 18496], [32340, 36314], [32194, 29746], [23840, 10620], [22340, 12418], [25421, 22873], [31624, 9932], [14290, 3232], [22160, 35336], [2092, 30823], [24761, 33821], [6629, 910], [5095, 39080], [20334, 15140], [15758, 13048], [33226, 21772], [20894, 19995], [36660, 1575], [39302, 23352], [23565, 7751], [27640, 31998], [36298, 9766], [26745, 13999], [15135, 14497], [6080, 25202], [28825, 26752], [37134, 1963], [12378, 3556], [13726, 2850], [13042, 9472], [29045, 15599], [15885, 35501], [3159, 34859], [10699, 11875], [19557, 12538], [37100, 13118], [33538, 26423], [14288, 18938], [30953, 4935], [31426, 39279], [39699, 8754], [3193, 33690], [35260, 30263], [8479, 7180], [39178, 733], [10464, 25755], [17603, 7748], [37181, 2008], [32013, 21393], [12142, 36765], [5164, 28141], [37826, 33997], [26653, 32412], [29293, 29118], [13972, 21479], [13244, 34581], [37307, 9320], [17759, 19696], [38573, 30271], [37799, 12886], [8030, 34452], [10201, 19113], [2423, 3253], [12133, 21963], [23612, 30839], [32450, 39821], [2112, 19756], [8850, 29781], [36696, 11194], [26869, 2991], [1573, 26936], [7873, 15951], [10018, 28244], [17513, 18400], [10807, 32791], [6629, 2045], [18670, 14780], [39262, 10630], [11155, 15583], [912, 1076], [18683, 21530], [5781, 33667], [29416, 11007], [9240, 20136], [17165, 35610], [27010, 6087], [14759, 20209], [12102, 37144], [11284, 31057], [21807, 39559], [16396, 2731], [13939, 21269], [23688, 15693], [31043, 7891], [3898, 4650], [16655, 17023], [30937, 9021], [17150, 35136], [29458, 35830], [6102, 29289], [12209, 21224], [24908, 11037], [28050, 21437], [23446, 32645], [35062, 27740], [35379, 22011], [25815, 27625], [6689, 24864], [33634, 6275], [4757, 6363], [18070, 16014], [306, 13231], [551, 19847], [19740, 1366], [5378, 3011], [35395, 13492], [36789, 10352], [2462, 21735], [9956, 22483], [29348, 13586], [7466, 17211], [13228, 14769], [19890, 32256], [17545, 26150], [23845, 21552], [35888, 13240], [38439, 27680], [31808, 28079], [38266, 29212], [23536, 1619], [30193, 5648], [37091, 10905], [22318, 6372], [16481, 34410], [30521, 7786], [16510, 28839], [2536, 34110], [39005, 8494], [38878, 32083], [28942, 24214], [14, 2162], [15035, 22575], [36303, 32436], [25389, 12051], [18177, 32220], [3497, 39422], [36538, 19963], [2377, 11841], [5072, 23658], [25089, 16662], [3434, 14773], [4846, 32051], [17649, 34176], [28281, 4627], [17131, 15334], [30570, 8879], [22358, 23613], [12271, 26654], [39577, 33520], [4256, 3254], [6108, 16115]];
    var s1 = [[30533, 24007], [22817, 38562], [930, 24566], [28001, 2800], [2947, 13306], [35723, 265], [24068, 11402], [12472, 1671], [8903, 13000], [32223, 4005], [21389, 23683], [39923, 7130], [33992, 7522], [1642, 29399], [5783, 760], [14555, 35460], [5742, 27550], [24947, 13849], [14617, 32967], [33753, 26354], [16070, 34309], [20022, 15484], [9082, 1698], [27752, 315], [26170, 8892], [9076, 7819], [22246, 2789], [14844, 34388], [22046, 17365], [7617, 35282], [18764, 31264], [30947, 28684], [33259, 14428], [22403, 28052], [29188, 33396], [26938, 37411], [28454, 38616], [17184, 19559], [124, 24444], [13951, 21170], [11395, 14819], [24459, 24008], [5950, 23402], [1036, 29471], [9503, 8581], [15470, 26128], [3321, 19074], [31815, 12342], [36285, 20702], [15549, 33112], [9315, 12290], [18160, 7984], [4538, 21560], [1701, 18389], [23152, 24000], [14691, 31967], [37700, 32903], [23888, 12279], [4655, 37659], [39985, 15801], [11398, 4988], [36182, 38462], [6670, 3637], [84, 13506], [18346, 17313], [21627, 26887], [4444, 4560], [13002, 30032], [239, 21966], [34628, 31376], [26772, 1654], [11016, 31110], [38555, 39507], [2308, 6978], [21736, 2911], [4, 29605], [37996, 28846], [23455, 22735], [16348, 1953], [1019, 20754], [13171, 20077], [17312, 6140], [31731, 38573], [4526, 7329], [20196, 12210], [6533, 5606], [35100, 10938], [19181, 11100], [26758, 35883], [495, 30055], [12799, 24909], [36227, 10416], [16719, 134], [4397, 22952], [33920, 8587], [13773, 17639], [22115, 1479], [14649, 33640], [34940, 9480], [11411, 3723], [33408, 18013], [31526, 13659], [30172, 2489], [3827, 2356], [28258, 4149], [15130, 39177], [927, 23279], [28076, 9974], [5913, 11990], [32102, 32628], [6059, 20737], [7361, 5477], [7213, 10748], [21216, 29405], [38907, 35590], [25321, 18497], [10107, 15293], [10638, 17061], [32533, 6945], [8942, 24739], [29710, 36191], [7407, 28072], [38363, 36509], [33976, 37696], [39531, 31458], [3192, 23630], [25221, 20853], [5266, 35998], [30942, 39083], [25358, 7164], [22890, 9528], [27289, 7073], [314, 28689], [17508, 18332], [11707, 9213], [4993, 23145], [37131, 36343], [19290, 31372], [6978, 38124], [27258, 34665], [34059, 27378], [26728, 21510], [27022, 4303], [35167, 24332], [13044, 26389], [33878, 20338], [2743, 33006], [33127, 15477], [752, 25047], [374, 6623], [3368, 5310], [25036, 1008], [12046, 30301], [35291, 21588], [22585, 740], [8656, 19987], [6502, 8291], [28843, 32859], [703, 38062], [1110, 25048], [17977, 24464], [11278, 34602], [20119, 19109], [34992, 16920], [20237, 48], [18667, 32889], [12724, 9589], [35573, 2275], [2470, 13829], [10809, 3083], [38841, 28084], [27550, 33634], [30176, 38648], [20212, 24444], [22041, 18856], [14071, 39053], [2483, 5666], [25817, 9920], [21649, 13358], [24411, 32712], [30378, 2918], [27763, 27577], [7336, 32757], [19069, 35255], [25757, 20980], [1299, 4261], [30341, 39487], [25799, 24422], [35472, 21751], [38170, 25059], [8002, 18463], [9429, 15109], [34222, 5822], [22374, 12448], [33764, 15543], [1640, 16551], [36711, 27055], [14722, 15724], [32208, 36022], [24386, 28994], [15505, 15514], [2532, 23627], [32574, 32582], [10003, 12906], [24068, 9395], [30066, 33688], [27277, 37110], [12443, 38175], [4467, 13394], [26035, 9382], [10136, 37670], [23228, 5601], [1960, 27674], [12020, 12759], [36554, 26859], [20569, 7953], [5367, 13488], [13018, 28382], [531, 30421], [10933, 19855], [19342, 38685], [29186, 5771], [3047, 3509], [32237, 16243], [36127, 13324], [20231, 19715], [12594, 20808], [6033, 7038], [37781, 5832], [14916, 31360], [28153, 21492], [10955, 20734], [19285, 9569], [18217, 20135], [321, 19603], [7514, 9907], [13059, 35186], [12190, 35583], [14685, 5649], [8120, 38238], [38784, 37513], [18842, 16830], [20461, 20010], [10805, 20787], [12917, 2152], [28151, 12269], [25467, 23894], [10436, 9584], [32466, 21152], [29615, 32822], [13622, 14039], [7596, 36153], [18304, 27413], [32007, 16240], [12706, 30999], [15393, 29150], [15673, 22499], [15698, 35600], [8611, 13121], [24525, 3644], [13939, 26721], [38047, 39459], [5185, 10501], [15027, 12622], [16559, 11185], [36989, 31235], [5542, 29767], [28774, 29937], [12933, 25119], [710, 8520], [5337, 22115], [31815, 31405], [5412, 26426], [10366, 20755], [27319, 34029], [31510, 33382], [21280, 31748], [18514, 13566], [34355, 5609], [11879, 35321], [4820, 27384], [32597, 20716], [9515, 9634], [21156, 19307], [19537, 33054], [19111, 1498], [37059, 22983], [12149, 23331], [26326, 18990], [20536, 2330], [36365, 31627], [12387, 24375], [6379, 38423], [22242, 35125], [25326, 29804], [19419, 33085], [13525, 30669], [22179, 27035], [36074, 1638], [17602, 9284], [12262, 34207], [37844, 10452], [28197, 3732], [16670, 26224], [7001, 20501], [4128, 37496], [11854, 23958], [37267, 11897], [9099, 22544], [17925, 16593], [11003, 3193], [26839, 309], [31322, 15042], [27027, 20132], [7997, 33827], [30683, 22404], [33465, 27447], [986, 31318], [1785, 122], [39971, 39574], [18460, 30974], [3992, 15143], [31150, 32858], [23523, 27867], [38615, 18922]];
    var s5 = [[31016, 17695], [37693, 30018], [39167, 11825], [10630, 32317], [19911, 7093], [26270, 28090], [10641, 1469], [25162, 34727], [5190, 1674], [30809, 14330], [17769, 13597], [13630, 29388], [29609, 7832], [6508, 19410], [34621, 15243], [11729, 14902], [15157, 26908], [7146, 4454], [25148, 36038], [1211, 18678], [34086, 18492], [30347, 11050], [23339, 13389], [3280, 4301], [22983, 14178], [13183, 17066], [31368, 21584], [38745, 20771], [36304, 28450], [22492, 37472], [21061, 21150], [8578, 5159], [6628, 3520], [23293, 8560], [16061, 17400], [39848, 17114], [32456, 10859], [25567, 3966], [18587, 3068], [14320, 37646], [18336, 16180], [34853, 32468], [32857, 11461], [31007, 16041], [14091, 24082], [38549, 105], [5949, 29205], [16657, 126], [18308, 9669], [39641, 30664], [33670, 11139], [24826, 38194], [26600, 38569], [18644, 26307], [31261, 34985], [36776, 35399], [39459, 30649], [5577, 6312], [26425, 8470], [30004, 22325], [13818, 39649], [12623, 17153], [27503, 34010], [11418, 37958], [26366, 15358], [11759, 67], [21794, 19715], [21546, 15278], [34238, 4926], [28746, 33184], [8700, 30286], [21056, 8893], [30538, 38040], [17234, 12246], [5446, 15007], [11662, 21712], [13753, 5604], [28574, 39158], [38700, 409], [26079, 25165], [17395, 34395], [31585, 36784], [710, 16194], [23548, 19369], [11595, 35014], [20018, 23810], [29074, 20404], [33549, 24809], [15724, 36822], [2111, 31863], [8473, 14563], [5164, 1657], [14303, 5285], [597, 18463], [9530, 4685], [21383, 12952], [248, 23256], [2375, 36674], [39374, 24178], [9158, 2897], [32747, 11323], [33310, 25153], [35487, 8140], [39396, 138], [29593, 7179], [2350, 31067], [26210, 10615], [35025, 34272], [34936, 16321], [9767, 2025], [37394, 37068], [15423, 19993], [19463, 28575], [34486, 26860], [21328, 16967], [8345, 35153], [19449, 28626], [8722, 9325], [27836, 25110], [25687, 35160], [17260, 31317], [32091, 12607], [3637, 18072], [799, 25985], [13492, 17003], [33692, 20874], [31983, 14250], [27555, 3430], [15800, 10930], [25065, 3547], [18127, 19147], [35189, 31578]];

    s0a = [ [37100, 13118], [37134, 1963], [37181, 2008], [37276, 21611], [37307, 9320]]

    it("s0", function () {
        expect(closestPairDistance(toPoints(s0))).toEqual(r0);
    })

    it("s0a", function () {
        expect(closestPairDistance(toPoints(s0a))).toEqual(r0);
    })

    it("s1", function () {
        expect(closestPairDistance(toPoints(s1))).toEqual(r1);
    })

    it("s5", function () {
        expect(closestPairDistance(toPoints(s5))).toEqual(r5);
    })
})

